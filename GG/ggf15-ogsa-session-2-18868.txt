OGSA EMS - GGF15 - Session 2
============================

  Date: October 3, 2005
  Minutes: Andreas Savva

* EMS introduction (Andrew Grimshaw)

  Presentation:
  https://forge.gridforum.org/projects/ogsa-wg/document/GGF15-OGSA-EMS-CDDLM/en/1
  (Also contains Dejan's modification)

  - Overview of work so far and open issues
  - Current focus is 'provisioning'
    - Andrew's definition is close to 'installing' and excludes
      staging of input and output files
  - Abstract notion of 'application'; nameable and can be queried for
    information about itself
    - Who defines the application? Perhaps the person who developed
      the program but could also be information gathered over time
      from previous invocations
    - And also provide information about how long it needs to install
      and so on

  - CDDLM does steps 3-5 (prepare, start, manage) but these *only
    within a deployment context* (not in a general context)
  - Are provisioning and scheduling separate steps in the execution
    path?  Or must the activity always start from provisioning every
    time that something needs to be executed (and have possible null
    steps)?
    - CDDLM: Tends to think of these as necessary steps but some might
      be null/no-op. (So even if something was setup earlier; still
      need to send in the same information.)
    - This is slightly different from OGSA EMS (which might simply not
      have the step instead of no-op) 
    - [And is this fundamentally different?]
    - For CDDLM: 'get the service executing' is simply to get the
      service ready for whatever it needs to do. It is not 'started'
      in the sense of a job starting to execute.
      - CDDLM stopped short of defining 'run'
      - (The service is set up for a different 'level' to make use of.)
      - As such 'get...': It should be out-of-scope of CDDLM (in the
        sense of EMS terminology)
  - Can the 'prepare' be separated out so that some parts (e.g., that
    need more setup) are provisioned separately from others? And can
    we identify these to reduce the coupling in the 'prepare'.
    - Know the 'whole tree' (CDL) in the prepare activity but
      be able to parcel it out;
    - In contrast to having to pass everything (entire CDL) each time
    - And is this a policy decision or just best practices?
      - And what is the role of Agreements in this activity? 

  - From the CDDLM perspective, the 'provisioner' is not the place to
    ask about which resource can do what.
  - ACS contains information about application (static) but not about
    containers.
  - The Information services hold container information (dynamic)

  - Separate two CDL functions: 1. Executing the workflow; and the
    information for determining what is needed
  - (And there are different requirements associated with where to
    'cut' the provisioning tree; i.e., up to which level to take as
    already provided.)

  - Continue the discussion at the F2F. In particular:
    - Factor functionalities and determine which piece does what.
