<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema
    targetNamespace="http://schemas.ggf.org/rss/2006/00/selection"
    xmlns:select="http://schemas.ggf.org/rss/2006/00/selection"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified" attributeFormDefault="qualified">
    <xsd:annotation>
        <xsd:documentation>
            This describes the types and elements used to describe the
            RSS Candidate Ordering Language.

            Copyright &#x00a9; 2006, Global Grid Forum
        </xsd:documentation>
        <!-- Need to check the copyright and get the full copyright statement in here. -->
    </xsd:annotation>
    <!-- Basic types -->
    <xsd:simpleType name="XPathType">
        <xsd:annotation>
            <xsd:documentation>
                The string values of this type MUST be XPath
                expressions, but the W3C does not seem to have defined
                an XSD type for this. It is up to the implementing
                application to enforce this restriction.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string" />
    </xsd:simpleType>
    <xsd:simpleType name="SelectOperation">
        <xsd:annotation>
            <xsd:documentation>
                Enumeration of ways to convert a NodeSet to a single
                double.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="first">
                <xsd:annotation>
                    <xsd:documentation>
                        Value is the value of the first node in the
                        NodeSet resulting from the XPath selection,
                        interpreted as a double. If the node is an
                        Element, then concatenate all the children of
                        the Element that are Text nodes, and parse the
                        resulting string. The evaluation of the
                        containing select:Select term MUST fail if the
                        NodeSet is empty or the parsed string cannot be
                        interpreted as a valid double value in the range
                        (-Inf..+Inf).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="count">
                <xsd:annotation>
                    <xsd:documentation>
                        Value is the cardinality of the NodeSet
                        resulting from the XPath selection. Does not
                        examine the node set contents. Does not have any
                        special failure modes.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="exists">
                <xsd:annotation>
                    <xsd:documentation>
                        Value is 1 if the NodeSet resulting from the
                        XPath selection is non-empty, and 0 otherwise.
                        Does not have any special failure modes.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="total">
                <xsd:annotation>
                    <xsd:documentation>
                        Value is the sum of the (floating-point) values
                        of the nodes in the NodeSet resulting from the
                        XPath selection, all interpreted as doubles.
                        Exception if not all values in the NodeSet are
                        interpretable as floats. 0 if the NodeSet is
                        empty. If any Node is an Element, then all the
                        Text Node children of that element are
                        concatenated to form a single string that is
                        then used in place of the actually selected
                        Node. The evaluation of the containing
                        select:Select term MUST fail if any of the
                        strings extracted from the NodeSet (as
                        described) cannot be interpreted as a valid
                        double value in range (-Inf..+Inf).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <!-- Non-term elements -->
    <xsd:element name="Value" type="xsd:double">
        <xsd:annotation>
            <xsd:documentation>
                A simple element containing a double-precision
                floating-point value.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="Path" type="select:XPathType">
        <xsd:annotation>
            <xsd:documentation>
                A simple element containing an XPath search
                specification. It is expected that this element might
                well have additional namespace specifiers attached to
                it.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <!-- Terms, the whole point of this schema -->
    <xsd:complexType name="Term">
        <xsd:annotation>
            <xsd:documentation>
                Base type of all terms.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:complexType>
    <xsd:element name="Term" abstract="true" type="select:Term">
        <xsd:annotation>
            <xsd:documentation>
                Abstract type of all terms. Conceptually, a term
                describes how to calculate a double-precision
                floating-point value, and evaluates to either a double
                value in the range (-Inf..+Inf) or a failure. If the
                evaluation of an overall term expression for a context
                document fails, that context document MUST be rejected
                from the set of legal context documents.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="Sum" substitutionGroup="select:Term">
        <xsd:annotation>
            <xsd:documentation>
                A term that calculates its value by summing the values
                of the terms inside it. The evaluation of this term MUST
                fail if the evaluation of any of the contained terms
                fails.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="select:Term">
                    <xsd:sequence>
                        <xsd:element ref="select:Term" minOccurs="2"
                            maxOccurs="unbounded" />
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="Product" substitutionGroup="select:Term">
        <xsd:annotation>
            <xsd:documentation>
                A term that calculates its value by multiplying toget
                the values of the terms inside it. The evaluation of
                this term MUST fail if the evaluation of any of the
                contained terms fails.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="select:Term">
                    <xsd:sequence>
                        <xsd:element ref="select:Term" minOccurs="2"
                            maxOccurs="unbounded" />
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="Power" substitutionGroup="select:Term">
        <xsd:annotation>
            <xsd:documentation>
                A term that calculates its value by raising the value of
                the term inside it to some (fixed) power. The evaluation
                MUST fail if an attempt to calcuate a non-integral power
                of a negative value is made, or if the evaluation of the
                contained term fails.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="select:Term">
                    <xsd:sequence>
                        <xsd:element ref="select:Term" minOccurs="1"
                            maxOccurs="1" />
                    </xsd:sequence>
                    <xsd:attribute name="exponent" type="xsd:double"
                        use="required" />
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="Negate" substitutionGroup="select:Term">
        <xsd:annotation>
            <xsd:documentation>
                A term that caluclates its value by negating the value
                of the term inside it. The evaluation MUST fail if the
                evaluation of the contained term fails.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="select:Term">
                    <xsd:sequence>
                        <xsd:element ref="select:Term" minOccurs="1"
                            maxOccurs="1" />
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="Log" substitutionGroup="select:Term">
        <xsd:annotation>
            <xsd:documentation>
                A term that calculates its value by taking the logarithm
                of the value of the term inside it. The base of the
                logarithm defaults to e. The evaluation of this term
                MUST fail if the evaluation of the contained term fails
                or results in a negative number. The base attribute MUST
                be positive.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="select:Term">
                    <xsd:sequence>
                        <xsd:element ref="select:Term" minOccurs="1"
                            maxOccurs="1" />
                    </xsd:sequence>
                    <xsd:attribute name="base" type="xsd:double"
                        default="2.71828182846" />
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="Exp" substitutionGroup="select:Term">
        <xsd:annotation>
            <xsd:documentation>
                A term that calculates its value by raising some fixed
                base to the degree of the value of the term inside it.
                The base of the exponent defaults to e. The base MUST be
                positive. The evaluation of this term MUST fail if the
                evaluation of the contained term fails.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="select:Term">
                    <xsd:sequence>
                        <xsd:element ref="select:Term" minOccurs="1"
                            maxOccurs="1" />
                    </xsd:sequence>
                    <xsd:attribute name="base" type="xsd:double"
                        default="2.71828182846" />
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="Abs" substitutionGroup="select:Term">
        <xsd:annotation>
            <xsd:documentation>
                A term that calculates its value by taking the absolute
                value of the term inside it (i.e. negating the value
                if-and-only-if the value is negative). The evaluation of
                this term MUST fail if the evaluation of the contained
                term fails.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="select:Term">
                    <xsd:sequence>
                        <xsd:element ref="select:Term" minOccurs="1"
                            maxOccurs="1" />
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="Constant" substitutionGroup="select:Term">
        <xsd:annotation>
            <xsd:documentation>
                A term whose value is a constant double-precision
                floating-point value. The evaluation of this term MUST
                NOT fail.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="select:Term">
                    <xsd:sequence>
                        <xsd:element ref="select:Value" />
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="Select" substitutionGroup="select:Term">
        <xsd:annotation>
            <xsd:documentation>
                A term whose value is computed from the set of nodes
                returned by an XPath search conducted over some document
                (i.e. the context document which we are computing an
                overall value for). The computation from the NodeSet is
                to be performed as follows: if a baseInstant attribute
                is specified on the Select element, then the NodeSet is
                to be replaced with another NodeSet where each node of
                the set is replaced by a node (of type xsd:double) that
                represents the number of seconds from the basInstant to
                the time parsed out of the original Node; if no
                baseInstant is specified, the node set MUST NOT be
                interpreted as containing time instants. Then the set of
                Nodes is converted to a double according to the action
                specified in the operation attribute; see the
                documentation of the select:SelectOperation type for
                details. The evaluation of this term MUST fail if the
                contained select:Path element does not hold a legal
                XPath expression; see the documentation of the
                select:SelectOperation type for other failure modes.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="select:Term">
                    <xsd:sequence>
                        <xsd:element ref="select:Path" />
                    </xsd:sequence>
                    <xsd:attribute name="baseInstant"
                        type="xsd:dateTime" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>
                                When nodes in the NodeSet returned from
                                the XPath search represent time
                                instants, they should be converted into
                                numeric values by taking the number of
                                seconds from the instant defined in this
                                attribute and the instant in the node.
                                It SHOULD be an error to set this
                                attribute if the nodes are not
                                interpretable as times. If any node is
                                an Element, it should be parsed as if it
                                was the concatenation of all the
                                children of the element that are Text
                                nodes.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="operation"
                        type="select:SelectOperation" default="first">
                        <xsd:annotation>
                            <xsd:documentation>
                                How to convert a NodeSet into a single
                                double. Defaults to taking the first
                                element of the NodeSet and just using
                                that. The evaluation failure modes of
                                the containing select:Select term are
                                partially determined by this attribute;
                                see the documentation of the
                                select:SelectOperation type for details.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="Bound" substitutionGroup="select:Term">
        <xsd:annotation>
            <xsd:documentation>
                This element evaluates its contained term and returns it
                only if it is within the range of values described by
                the pair of bounding attributes. If the bounding
                constraints are not satisfied, the whole term evaluation
                MUST fail. The evaluation of this term MUST fail if the
                evaluation of the contained term fails.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="select:Term">
                    <xsd:sequence>
                        <xsd:element ref="select:Term" minOccurs="1"
                            maxOccurs="1" />
                    </xsd:sequence>
                    <xsd:attribute name="lowerBound" type="xsd:double"
                        use="optional">
                        <xsd:annotation>
                            <xsd:documentation>
                                This indicates the lower (inclusive)
                                bound of the term's value. If omitted,
                                there is no lower bound (or,
                                alternatively, the lower bound is
                                negative infinity).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="upperBound" type="xsd:double"
                        use="optional">
                        <xsd:annotation>
                            <xsd:documentation>
                                This indicates the upper (inclusive)
                                bound of the term's value. If omitted,
                                there is no upper bound (or,
                                alternatively, the upper bound is
                                positive infinity).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
    <xsd:element name="OneOf" substitutionGroup="select:Term">
        <xsd:annotation>
            <xsd:documentation>
                This element has the value of the first contained term
                in it that evaluates successfully. All subsequent
                contained terms after the first successfully-computed
                one MUST NOT be evaluated. The evaluation of this term
                MUST fail if and only if the evaluation of all contained
                terms fails.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="select:Term">
                    <xsd:sequence>
                        <xsd:element ref="select:Term" minOccurs="1"
                            maxOccurs="unbounded" />
                    </xsd:sequence>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
</xsd:schema>
