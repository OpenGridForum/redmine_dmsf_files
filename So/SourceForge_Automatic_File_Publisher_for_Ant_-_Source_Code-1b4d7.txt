
package com.vasoftware;

import java.util.Vector;
import java.util.Hashtable;
import java.io.File;
import java.io.FileInputStream;
import org.apache.xmlrpc.XmlRpcClient;
import org.apache.xmlrpc.XmlRpcException;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.BuildException;

public class SFPublishTask extends org.apache.tools.ant.Task {
	String uploadURL;
	String serverURL;
	String server, project, pack, rel, user, pass, maturity, directory;

	boolean allArgsSupplied;

	public SFPublishTask () {
		uploadURL = "/frs/fileUpload.php";
		allArgsSupplied = false;
	}

	public void setServer (String s) {
		server = s;
		serverURL = "http://" + s + uploadURL;
	}

	public void setProject (String p) {
		project = p;
	}

	public void setPackage (String p) {
		pack = p;
	}

	public void setRelease (String r) {
		rel = r;
	}

	public void setUser (String u) {
		user = u;
	}

	public void setPassword (String p) {
		pass = p;
	}

	public void setMaturity (String m) {
		maturity = m;
	}

	public void setDirectory (String d) {
		directory = d;
	}

	public void execute () throws org.apache.tools.ant.BuildException {

		if (pack != "" && rel != "" && user != "" && maturity != ""
			&& project != "" && server != "" && pass != "" && directory != "") {
			allArgsSupplied = true;
		}

		try {
			//Check for command line arguments
			if(!allArgsSupplied){

//				System.err.println("Required: argument.\nUsage: java JavaClient <directory> <username> <password> <project> <package> <file release> <maturity level>\nWritten By: Sandeep C <csandeep@cybernetsoft.com>");
//				System.exit(-1);
				throw new org.apache.tools.ant.BuildException ("Required: argument.\nUsage: <sf-publish directory= username= password= project= package= release= maturity= />");
			}

			File dir = new File(directory);

			if(!dir.isDirectory()){

				throw new org.apache.tools.ant.BuildException ("Required: argument.\nUsage: <sf-publish directory= username= password= project= package= release= maturity= />");

			}

			File files[] = dir.listFiles();

			System.out.println("List of files in chosen directory: " + files.length);

			// Create an object to represent our server.
			XmlRpcClient server = new XmlRpcClient(serverURL);

			// Build our parameter list.
			Vector params = new Vector();

			Hashtable hash = new Hashtable();

			//Read all Files

			for(int i=0;i<files.length;i++){

				if(files[i].isFile()){

					FileInputStream filestream = new FileInputStream(files[i]);
					byte bytearray[] = new byte[filestream.available()];
					filestream.read(bytearray);

					hash.put(new String(files[i].getName()),bytearray);

					filestream.close();
					filestream = null;
					bytearray = null;

				}

			}

			params.addElement (hash);


			//User name
			params.addElement (user);

			//password
			params.addElement (pass);

			//Project name
			params.addElement (project);

			//Package name
			params.addElement (pack);

			//File release name
			params.addElement (rel);

			//Maturity level
			params.addElement (maturity);


			// Call the server, and get our result.
			System.out.println("contacting the server...\n");
			Hashtable result = (Hashtable) server.execute(new String("frs.fileUpload"), params);
			String res = (result.get("rMesg")).toString();

			// Print out our result.
			System.out.println("Result:\n" + res);

		} catch (XmlRpcException exception) {
			throw new org.apache.tools.ant.BuildException ("XMLRPC fault #" + 
					Integer.toString(exception.code) + ": " +
					exception.toString());

		} catch (Exception e) {
			throw new org.apache.tools.ant.BuildException (e.toString());
		}
	}
}
